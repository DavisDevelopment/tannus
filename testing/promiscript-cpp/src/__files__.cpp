#include <hxcpp.h>

namespace hx {
const char *__hxcpp_all_files[] = {
#ifdef HXCPP_DEBUGGER
"/usr/lib/haxe/std/Lambda.hx",
"/usr/lib/haxe/std/cpp/Lib.hx",
"/usr/lib/haxe/std/cpp/_std/EReg.hx",
"/usr/lib/haxe/std/cpp/_std/Reflect.hx",
"/usr/lib/haxe/std/cpp/_std/Std.hx",
"/usr/lib/haxe/std/cpp/_std/Type.hx",
"/usr/lib/haxe/std/cpp/_std/haxe/ds/StringMap.hx",
"/usr/lib/haxe/std/haxe/Log.hx",
"/usr/lib/haxe/std/haxe/crypto/Base64.hx",
"/usr/lib/haxe/std/haxe/crypto/BaseCode.hx",
"/usr/lib/haxe/std/haxe/io/Bytes.hx",
"/usr/lib/haxe/std/haxe/io/Path.hx",
"PromiScript.hx",
"tannus/core/EventDispatcher.hx",
"tannus/internal/ValueMap.hx",
"tannus/internal/rc/AST.hx",
"tannus/internal/rc/Interp.hx",
"tannus/internal/rc/Lexer.hx",
"tannus/internal/rc/Parser.hx",
"tannus/io/Byte.hx",
"tannus/io/ByteArray.hx",
"tannus/io/Char.hx",
"tannus/io/Memory.hx",
"tannus/utils/Buffer.hx",
"tannus/utils/MapTools.hx",
"tannus/utils/Maybe.hx",
"tannus/utils/Path.hx",
"tannus/utils/Pointer.hx",
"tannus/utils/Promise.hx",
"tannus/utils/Setter.hx",
"tannus/utils/Types.hx",
"tannus/utils/Value.hx",
#endif
 0 };

const char *__hxcpp_all_files_fullpath[] = {
#ifdef HXCPP_DEBUGGER
"/usr/lib/haxe/std/Lambda.hx",
"/usr/lib/haxe/std/cpp/Lib.hx",
"/usr/lib/haxe/std/cpp/_std/EReg.hx",
"/usr/lib/haxe/std/cpp/_std/Reflect.hx",
"/usr/lib/haxe/std/cpp/_std/Std.hx",
"/usr/lib/haxe/std/cpp/_std/Type.hx",
"/usr/lib/haxe/std/cpp/_std/haxe/ds/StringMap.hx",
"/usr/lib/haxe/std/haxe/Log.hx",
"/usr/lib/haxe/std/haxe/crypto/Base64.hx",
"/usr/lib/haxe/std/haxe/crypto/BaseCode.hx",
"/usr/lib/haxe/std/haxe/io/Bytes.hx",
"/usr/lib/haxe/std/haxe/io/Path.hx",
"/home/ryan/Dropbox/MyCloudCode/Tannus/src/PromiScript.hx",
"/home/ryan/Dropbox/MyCloudCode/Tannus/src/tannus/core/EventDispatcher.hx",
"/home/ryan/Dropbox/MyCloudCode/Tannus/src/tannus/internal/ValueMap.hx",
"/home/ryan/Dropbox/MyCloudCode/Tannus/src/tannus/internal/rc/AST.hx",
"/home/ryan/Dropbox/MyCloudCode/Tannus/src/tannus/internal/rc/Interp.hx",
"/home/ryan/Dropbox/MyCloudCode/Tannus/src/tannus/internal/rc/Lexer.hx",
"/home/ryan/Dropbox/MyCloudCode/Tannus/src/tannus/internal/rc/Parser.hx",
"/home/ryan/Dropbox/MyCloudCode/Tannus/src/tannus/io/Byte.hx",
"/home/ryan/Dropbox/MyCloudCode/Tannus/src/tannus/io/ByteArray.hx",
"/home/ryan/Dropbox/MyCloudCode/Tannus/src/tannus/io/Char.hx",
"/home/ryan/Dropbox/MyCloudCode/Tannus/src/tannus/io/Memory.hx",
"/home/ryan/Dropbox/MyCloudCode/Tannus/src/tannus/utils/Buffer.hx",
"/home/ryan/Dropbox/MyCloudCode/Tannus/src/tannus/utils/MapTools.hx",
"/home/ryan/Dropbox/MyCloudCode/Tannus/src/tannus/utils/Maybe.hx",
"/home/ryan/Dropbox/MyCloudCode/Tannus/src/tannus/utils/Path.hx",
"/home/ryan/Dropbox/MyCloudCode/Tannus/src/tannus/utils/Pointer.hx",
"/home/ryan/Dropbox/MyCloudCode/Tannus/src/tannus/utils/Promise.hx",
"/home/ryan/Dropbox/MyCloudCode/Tannus/src/tannus/utils/Setter.hx",
"/home/ryan/Dropbox/MyCloudCode/Tannus/src/tannus/utils/Types.hx",
"/home/ryan/Dropbox/MyCloudCode/Tannus/src/tannus/utils/Value.hx",
#endif
 0 };

const char *__hxcpp_all_classes[] = {
#ifdef HXCPP_DEBUGGER
"cpp.Lib",
"EReg",
"Lambda",
"PromiScript",
"Reflect",
"Std",
"Type",
"haxe.Log",
"haxe.io.Bytes",
"haxe.crypto.Base64",
"haxe.crypto.BaseCode",
"haxe.ds.StringMap",
"haxe.io.Path",
"tannus.core.EventDispatcher",
"tannus.core.Handler",
"tannus.internal._ValueMap.ValueMap_Impl_",
"tannus.internal.VMap",
"tannus.internal.rc._AST.AST_Impl_",
"tannus.internal.rc._AST.Node_Impl_",
"tannus.internal.rc.Interp",
"tannus.internal.rc.Lexer",
"tannus.internal.rc.Parser",
"tannus.io._Byte.Byte_Impl_",
"tannus.io._ByteArray.ByteArray_Impl_",
"tannus.io._Char.Char_Impl_",
"tannus.io.Memory",
"tannus.utils._Buffer.Buffer_Impl_",
"tannus.utils.MapTools",
"tannus.utils._Maybe.Maybe_Impl_",
"tannus.utils._Path.Path_Impl_",
"tannus.utils._Pointer.Pointer_Impl_",
"tannus.utils.CPointer",
"tannus.utils._Promise.Promise_Impl_",
"tannus.utils.CPromise",
"tannus.utils._Setter.Setter_Impl_",
"tannus.utils.CSetter",
"tannus.utils.Types",
"tannus.utils._Value.Value_Impl_",
"tannus.utils.CValue",
#endif
 0 };
} // namespace hx
void __files__boot() { __hxcpp_set_debugger_info(hx::__hxcpp_all_classes, hx::__hxcpp_all_files_fullpath); }
